{"version":3,"sources":["Scoreboard.tsx","Button.tsx","Counter.tsx","Input.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Scoreboard","props","number","maxNum","className","Button","onClickHandler","buttonName","disabled","onClick","Counter","set","res","setActive","startNum","Input","changeHandler","value","type","onChange","Setting","changeMaxNum","changeStartNum","error","App","useState","setNamber","activeSetting","setActiveSetting","setMaxNum","setStartNum","useEffect","valueAsString_1","localStorage","getItem","maxNumValue","JSON","parse","valueAsString_2","startNumValue","setItem","stringify","e","currentTarget","valueAsNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.119fd74b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\ntype ScoreboardProps = {\r\n    number: number\r\n    maxNum: number\r\n}\r\n\r\nexport const Scoreboard: React.FC<ScoreboardProps> = (props) => {\r\n\r\n    const {number, maxNum} = props\r\n\r\n    return (\r\n        <div className={number === maxNum ? 'red' : 'scoreboard'}>\r\n            {number}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    onClickHandler: () => void\r\n    className: string\r\n    buttonName: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({ onClickHandler, className, buttonName, disabled}) => {\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={disabled} className={className} onClick={onClickHandler}>{buttonName}</button>\r\n        </div>\r\n    )\r\n}\r\n","import {Scoreboard} from \"./Scoreboard\";\r\nimport {Button} from \"./Button\";\r\nimport React from \"react\";\r\nimport './App.css'\r\n\r\ntype PropsType = {\r\n    set: () => void\r\n    res: () => void\r\n    number: number\r\n    maxNum: number\r\n    startNum: number\r\n    setActive: () => void\r\n}\r\n\r\nexport const Counter: React.FC<PropsType> = (props) => {\r\n\r\n    const {set, res, setActive, number, maxNum, startNum} = props\r\n\r\n    return (\r\n        <div>\r\n            <div className={'screen'}>\r\n                <Scoreboard number={number} maxNum={maxNum}/>\r\n            </div>\r\n            <div className={'buttons'}>\r\n                <Button disabled={number === maxNum}\r\n                        onClickHandler={set}\r\n                        className={'ink'}\r\n                        buttonName={'Ink'}\r\n                />\r\n                <Button onClickHandler={setActive}\r\n                        className={'set'}\r\n                        buttonName={'Set'}\r\n                />\r\n                <Button disabled={number === startNum}\r\n                        onClickHandler={res}\r\n                        className={'reset'}\r\n                        buttonName={'Reset'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    changeHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    className: string\r\n    value: number\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    const {changeHandler, className, value} = props\r\n\r\n    return (\r\n        <input className={className} type=\"number\" onChange={changeHandler} value={value}/>\r\n    )\r\n}","import {Button} from \"./Button\";\r\nimport {ChangeEvent} from \"react\";\r\nimport {Input} from \"./Input\";\r\n\r\ntype PropsType = {\r\n    setActive: () => void\r\n    changeMaxNum: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeStartNum: (e: ChangeEvent<HTMLInputElement>) => void\r\n    maxNum: number\r\n    startNum: number\r\n}\r\n\r\nexport const Setting: React.FC<PropsType> = (props) => {\r\n    const {setActive, changeMaxNum, changeStartNum, maxNum, startNum} = props\r\n\r\n    const error = maxNum <= startNum || maxNum < 0 || startNum < 0\r\n\r\n    return (\r\n        <div>\r\n            <div className={error ? 'info_err' : 'setting_info'}>\r\n                {error ? 'Incorrect value!' : 'Enter values and press \"Accept\"'}\r\n            </div>\r\n            <div className={'input_board'}>\r\n                <div className={'setting'}>\r\n                    <div>\r\n                        {'max value:'}\r\n                    </div>\r\n                    <Input changeHandler={changeMaxNum}\r\n                           className={maxNum <= startNum || maxNum < 0 ? 'input_err' : 'setting_input'}\r\n                           value={maxNum} />\r\n                </div>\r\n                <div className={'setting'}>\r\n                    <div>\r\n                        {'start value:'}\r\n                    </div>\r\n                    <Input changeHandler={changeStartNum}\r\n                           className={maxNum <= startNum || startNum < 0 ? 'input_err' : 'setting_input'}\r\n                           value={startNum} />\r\n                </div>\r\n            </div>\r\n            <div className={'setting_button'}>\r\n                <Button onClickHandler={setActive}\r\n                        disabled={error}\r\n                        className={'accept'}\r\n                        buttonName={'Accept'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {Setting} from \"./Settings\";\n\nexport const App: React.FC = () => {\n\n    const [number, setNamber] = useState<number>(0)\n    const [activeSetting, setActiveSetting] = useState<boolean>(false)\n    const [maxNum, setMaxNum] = useState<number>(5)\n    const [startNum, setStartNum] = useState<number>(0)\n\n    useEffect(() => {\n        const valueAsString_1 = localStorage.getItem('maxNumValue')\n        if (valueAsString_1) {\n            const maxNumValue = JSON.parse(valueAsString_1)\n            setMaxNum(maxNumValue)\n        }\n    }, [])\n    useEffect(() => {\n        const valueAsString_2 = localStorage.getItem('startNumValue')\n        if (valueAsString_2) {\n            const startNumValue = JSON.parse(valueAsString_2)\n            setStartNum(startNumValue)\n            setNamber(startNumValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxNumValue', JSON.stringify(maxNum))\n    }, [maxNum])\n    useEffect(() => {\n        localStorage.setItem('startNumValue', JSON.stringify(startNum))\n    }, [startNum])\n\n    const set = () => number < maxNum && setNamber(number + 1)\n    const res = () => setNamber(startNum)\n    const setActive = () => setActiveSetting(!activeSetting)\n    const changeMaxNum = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.currentTarget.valueAsNumber\n        setMaxNum(value)\n    }\n    const changeStartNum = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.currentTarget.valueAsNumber\n        setStartNum(value)\n        setNamber(value)\n    }\n\n\n    return (\n        <div className={'container'}>\n            {activeSetting\n                ? <div className={'settings'}>\n                    <Setting setActive={setActive}\n                             changeMaxNum={changeMaxNum}\n                             changeStartNum={changeStartNum}\n                             maxNum={maxNum}\n                             startNum={startNum}\n                    />\n                </div>\n                : <div className={'counter'}>\n                    <Counter set={set}\n                             res={res}\n                             setActive={setActive}\n                             number={number}\n                             maxNum={maxNum}\n                             startNum={startNum}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}